/**
 * ВНИМАНИЕ!!!
 *   Тест сгенерирован утилитой script/gentest-thaw.pl.
 *   Ничего не менять: перетрётся.
 */
const thaw = require('..').thaw;

describe('node-perl-storable#thaw', () => {

    it('Натуральное', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,8,251]);
        expect(thaw(data)).toEqual(123);
    });


    it('Среднее натуральное', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,6,128,0,0,0,0,0,0,0]);
        expect(thaw(data)).toEqual(128);
    });


    it('Среднее натуральное побольше', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,6,64,66,15,0,0,0,0,0]);
        expect(thaw(data)).toEqual(1000000);
    });


    it('Большое натуральное', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,6,0,242,5,42,1,0,0,0]);
        expect(thaw(data)).toEqual(5000000000);
    });


    it('Целое', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,8,5]);
        expect(thaw(data)).toEqual(-123);
    });


    it('Среднее целое', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,8,0]);
        expect(thaw(data)).toEqual(-128);
    });


    it('Среднее целое поменьше', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,6,192,189,240,255,255,255,255,255]);
        expect(thaw(data)).toEqual(-1000000);
    });


    it('Большое целое', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,6,0,14,250,213,254,255,255,255]);
        expect(thaw(data)).toEqual(-5000000000);
    });


    it('Плавающее', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,7,174,71,225,122,20,174,243,63]);
        expect(thaw(data)).toEqual(1.23);
    });


    it('Плавающее отрицательное', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,7,45,15,37,64,118,126,182,212]);
        expect(thaw(data)).toEqual(-1.2300000000000003e+100);
    });


    it('Строка', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,10,3,49,50,51]);
        expect(thaw(data)).toEqual('123');
    });


    it('Пустая строка', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,10,0]);
        expect(thaw(data)).toEqual('');
    });


    it('Длинная строка', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,1,232,3,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49]);
        expect(thaw(data)).toEqual('1'.repeat(1000));
    });


    it('Строка no utf8', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,10,13,208,159,209,128,208,184,208,178,208,181,209,130,33]);
        expect(thaw(data)).toEqual(Buffer.from([208,159,209,128,208,184,208,178,208,181,209,130,33]));
    });


    it('Строка в utf8', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,23,13,208,159,209,128,208,184,208,178,208,181,209,130,33]);
        expect(thaw(data)).toEqual('Привет!');
    });


    it('Скаляр', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,10,5,45,49,46,50,51]);
        expect(thaw(data)).toEqual('-1.23');
    });


    it('Массив', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,2,4,0,0,0,8,251,7,174,71,225,122,20,174,243,191,10,3,49,50,51,23,13,208,159,209,128,208,184,208,178,208,181,209,130,33]);
        expect(thaw(data)).toEqual([123,-1.23,'123','Привет!']);
    });


    it('Хеш', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,25,0,5,0,0,0,4,2,3,0,0,0,8,129,8,130,8,131,1,13,0,0,0,208,159,209,128,208,184,208,178,208,181,209,130,33,4,3,1,0,0,0,5,1,0,0,0,120,0,3,0,0,0,116,105,112,8,151,0,1,0,0,0,49,10,3,49,50,51,0,1,0,0,0,117,7,174,71,225,122,20,174,243,191,0,12,0,0,0,45,49,53,54,48,48,48,48,48,48,48,48]);
        expect(thaw(data)).toEqual({ '-15600000000': -1.23,'1': 23,'tip': { 'x': null },'u': '123','Привет!': [1,2,3] });
    });


    it('Неопределённое значение', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,5]);
        expect(thaw(data)).toEqual(null);
    });


    it('Вложенный Массив', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,2,5,0,0,0,8,251,7,174,71,225,122,20,174,243,191,10,3,49,50,51,4,2,3,0,0,0,8,129,8,130,8,131,23,13,208,159,209,128,208,184,208,178,208,181,209,130,33]);
        expect(thaw(data)).toEqual([123,-1.23,'123',[1,2,3],'Привет!']);
    });


    it('Рекурсивный Массив', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,2,9,0,0,0,8,251,7,174,71,225,122,20,174,243,191,5,10,3,49,50,51,1,232,3,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,4,2,1,0,0,0,8,133,4,3,1,0,0,0,8,134,1,0,0,0,120,23,13,208,159,209,128,208,184,208,178,208,181,209,130,33,4,0,0,0,0,0]);
        expect(thaw(data)).toEqual((() => {
            let x=[123, -1.23, null, '123', '1'.repeat(1000), [5], { x: 6 }, 'Привет!']; x.push(x);

            return x; 
        })());
    });


    it('Объект', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,17,1,65,3,1,0,0,0,8,134,1,0,0,0,120]);
        
        class A {
            getX () {
                return this.x; 
            } 
        }
        let a = thaw(data, { A });
        expect(a.getX()).toEqual(6);
        expect(a).toBeInstanceOf(A);
    
    });


    it('Объект-массив', () => {
        let data = Buffer.from([4,11,8,49,50,51,52,53,54,55,56,4,8,8,8,17,1,65,2,2,0,0,0,8,133,10,3,97,98,99]);
        
        class A extends Array {}
        let a = thaw(data, { A });
        expect(a).toHaveLength(2);
        expect(a).toBeInstanceOf(A);
    
    });


});
